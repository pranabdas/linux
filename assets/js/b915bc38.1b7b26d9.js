"use strict";(self.webpackChunklinux_tutorial=self.webpackChunklinux_tutorial||[]).push([[635],{1880:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=t(5710),s=["components"],o={title:"Shell scripting",keywords:["shell scripting","bash scripting","scripting in linux"]},m=void 0,p={unversionedId:"shell-scripting",id:"shell-scripting",title:"Shell scripting",description:"Choose a unique name for the scripting file. Try following commands to see if an",source:"@site/docs/shell-scripting.mdx",sourceDirName:".",slug:"/shell-scripting",permalink:"/linux/shell-scripting",draft:!1,editUrl:"https://github.com/pranabdas/linux/blob/main/docs/shell-scripting.mdx",tags:[],version:"current",frontMatter:{title:"Shell scripting",keywords:["shell scripting","bash scripting","scripting in linux"]},sidebar:"docs",previous:{title:"Docker",permalink:"/linux/docker"},next:{title:"Misc",permalink:"/linux/category/misc"}},d={},c=[{value:"String substitution",id:"string-substitution",level:2},{value:"Running python code in bash script",id:"running-python-code-in-bash-script",level:3},{value:"Input password",id:"input-password",level:3},{value:"Check command availability",id:"check-command-availability",level:3},{value:"Check environment variable",id:"check-environment-variable",level:3},{value:"Learn more",id:"learn-more",level:2}],h={toc:c};function u(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Choose a unique name for the scripting file. Try following commands to see if an\nexecutable with the same name exists:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"type myscript\ntype -a myscript\nwhich myscript\n")),(0,r.kt)("p",null,"Then we need to store our executable in the system ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),". Check the existing\npaths:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo $PATH\n")),(0,r.kt)("p",null,"If we want to include a new path to our ",(0,r.kt)("inlineCode",{parentName:"p"},"$PATH")," variable, we can include\nfollowing in our ",(0,r.kt)("inlineCode",{parentName:"p"},".bashrc"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"PATH=$PATH:/new/path\n")),(0,r.kt)("p",null,"or, issue this every time you restart your terminal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export PATH="/new/path:$PATH"\n')),(0,r.kt)("p",null,"We can write our script in a file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="myscript.sh"',title:'"myscript.sh"'},'#!/bin/bash\necho "Hello world"\n')),(0,r.kt)("p",null,"Next step is to grant executable permission:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x myscript.sh\n")),(0,r.kt)("p",null,"We can execute the script by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./myscript.sh\n")),(0,r.kt)("p",null,"We can also run the script by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sh myscript.sh\n\nbash myscript.sh\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"sh")," and ",(0,r.kt)("strong",{parentName:"p"},"bash")," are not exactly the same, and might give slightly different\nresult in some cases. bash refers to Born Again SHell while sh refers to the\noriginal UNIX shell. To know which shell interpreter is currently running,\nissue: ",(0,r.kt)("inlineCode",{parentName:"p"},"echo $0"),"."))),(0,r.kt)("p",null,"Variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'my_var="/home/user/pranab"\nmy_num=0\nmy_num=$((my_num + 1))\n\necho ${my_var}\necho $my_num\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"bash")," uses capitalized variable names for global variables (e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"PWD"),"). Perhaps it is a good idea to name local variables with lower case\nletters to avoid conflict."))),(0,r.kt)("p",null,"Array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'my_arr=("one" "two")\n\n# add item\nmy_arr+=(three)\n\n# length of an array\nlen=${#my_arr[@]}\n')),(0,r.kt)("p",null,"For loop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'for i in "${my_arr[@]}"\n  do printf "${i}\\n"\ndone\n')),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"seq")," to create array with increment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ my_arr2=`seq 0 2 10`; echo $my_arr2\n0\n2\n4\n6\n8\n10\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In ",(0,r.kt)("strong",{parentName:"p"},"bash")," the array index starts from 0, while in ",(0,r.kt)("strong",{parentName:"p"},"zsh")," it starts from 1. If\nyou want your script to be cross compatible, you may use\n",(0,r.kt)("inlineCode",{parentName:"p"},"${array[@]:offset:length}")," e.g., only first element ",(0,r.kt)("inlineCode",{parentName:"p"},"${array[@]:0:1}"),"; only\nsecond element ",(0,r.kt)("inlineCode",{parentName:"p"},"${array[@]:1:1}"),"; first and second element ",(0,r.kt)("inlineCode",{parentName:"p"},"${array[@]:0:2}"),"."))),(0,r.kt)("p",null,"If condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# if a file exists\nif [ -e ".DS_Store" ] ; then\n    rm ".DS_Store"\nfi\n\n# if a directory exists\nif [ -d "tmpdir" ] ; then\n    rm -rf tmpdir\nfi\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Common file attribute operators:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"True if"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-a or -e"),(0,r.kt)("td",{parentName:"tr",align:null},"file exists")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-d"),(0,r.kt)("td",{parentName:"tr",align:null},"is a directory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-f"),(0,r.kt)("td",{parentName:"tr",align:null},"is a regular file (e.g., not a directory)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-s"),(0,r.kt)("td",{parentName:"tr",align:null},"not empty")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-r/w/x"),(0,r.kt)("td",{parentName:"tr",align:null},"have read/write/execute permission")))),(0,r.kt)("p",null,"Brace expansion:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ echo {1..10}\n1 2 3 4 5 6 7 8 9 10\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ echo {2020..2021}-{01..12}\n2020-01 2020-02 2020-03 2020-04 2020-05 2020-06 2020-07 2020-08\n2020-09 2020-10 2020-11 2020-12 2021-01 2021-02 2021-03 2021-04\n2021-05 2021-06 2021-07 2021-08 2021-09 2021-10 2021-11 2021-12\n")),(0,r.kt)("p",null,"A bash script to convert degree Celsius to Fahrenheit:"),(0,r.kt)(l.Z,{language:"bash",title:"src/deg_f_to_c_conv.sh",showLineNumbers:!0,mdxType:"CodeBlock"},'#!/bin/bash\n# this reports undefined variables\nshopt -s -o nounset\n\n# declare integer variables\ndeclare -i tempF\ndeclare -i tempC\n\nprintf "Fahrenheit-Celsius Conversion\\n\\n"\n\n# read value via prompt\nread -p "Enter temperature in Celsius (integer only): " tempC\ntempF="9*tempC/5+32"\nprintf "The Fahrenheit temperature is %d\\n" "$tempF"\nexit 0\n'),(0,r.kt)("h2",{id:"string-substitution"},"String substitution"),(0,r.kt)("p",null,"Rename files example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls\nitem_01.txt item_03.txt item_05.txt item_07.txt item_09.txt\nitem_02.txt item_04.txt item_06.txt item_08.txt item_10.txt\n\n# match string at end with %\n$ for i in $( ls ); do mv ${i} ${i%*.txt}.md; done; ls\nitem_01.md item_03.md item_05.md item_07.md item_09.md\nitem_02.md item_04.md item_06.md item_08.md item_10.md\n\n# match string at beginning with #\n$ for i in $( ls ); do mv ${i} slide_${i#*_*}; done; ls\nslide_01.md slide_03.md slide_05.md slide_07.md slide_09.md\nslide_02.md slide_04.md slide_06.md slide_08.md slide_10.md\n\n# or\n$ for i in $( ls ); do mv ${i} slide_${i#item_*}; done\n")),(0,r.kt)("p",null,"Replace spaces in the filenames with underscores:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'for file in *\\ *; do mv "$file" "${file// /_}"; done\n')),(0,r.kt)("h3",{id:"running-python-code-in-bash-script"},"Running python code in bash script"),(0,r.kt)("p",null,"You can include python, ruby, or any other language code in a bash script. Here\nis an example:"),(0,r.kt)(l.Z,{language:"bash",title:"src/github_emoji.sh",showLineNumbers:!0,mdxType:"CodeBlock"},"if [ -d \"assets\" ]; then\n  rm -rf assets\nfi\nmkdir assets\n\nwget https://api.github.com/emojis -O data.json\n\npython3 <<EOF\nimport json\n\nfid = open('data.json')\ndata = json.load(fid)\nfid.close()\n\nfid = open('wget_urls', 'w')\nfor key, value in data.items():\n    fid.write(\"wget {0} -O assets/{1}.png\\n\".format(value, key))\nfid.close()\n\nfid = open('README.md', 'w')\nfid.write(\"# GitHub emoji assets\\n\\nThis repository contains the GitHub emoji assets in PNG format. Here are all the {0} emojis:\\n\\nName | Emoji\\n---- | -----\\n\".format(len(data)))\nfor key in data.keys():\n    fid.write('{0} | <img src=\"assets/{0}.png\" alt=\"{0}\" width=20/>\\n'.format(key))\nfid.close()\nEOF\n\nsh wget_urls\nrm data.json wget_urls\n"),(0,r.kt)("h3",{id:"input-password"},"Input password"),(0,r.kt)("p",null,"Here is a solution for the bash:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\nread -s -p "Password: " passwd; echo\n# do something with the passwd\necho $passwd\nunset passwd\n')),(0,r.kt)("p",null,"A POSIX compatible alternative:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n# disable echo\nstty -echo\nprintf "Password: "\nread passwd\n# enable echo\nstty echo\nprintf "\\n"\necho $passwd\n')),(0,r.kt)("p",null,"New line in ",(0,r.kt)("inlineCode",{parentName:"p"},"echo"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'echo -e "First line.\\nSecond line."\n')),(0,r.kt)("h3",{id:"check-command-availability"},"Check command availability"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'COMMANDS=("git" "node" "python3" "ruby")\n\nfor COMMAND in $COMMANDS; do\n  if ! command -v "$COMMAND" &> /dev/null; then\n    echo "Please install $COMMAND";\n    # exit 1;\n  fi\ndone\n')),(0,r.kt)("h3",{id:"check-environment-variable"},"Check environment variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'if [ -z "$HOME" ]; then\n  echo "Seems "\\$HOME" is not defined :(";\n  # exit 1;\nfi\n')),(0,r.kt)("h2",{id:"learn-more"},"Learn more"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Learning the bash Shell: Unix Shell Programming")," by ",(0,r.kt)("em",{parentName:"li"},"C. Newham"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Linux Shell Scripting With Bash")," by ",(0,r.kt)("em",{parentName:"li"},"K. O. Burtch"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tldp.org/guides.html"},"https://tldp.org/guides.html"))))}u.isMDXComponent=!0}}]);