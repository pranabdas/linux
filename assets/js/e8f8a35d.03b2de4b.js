"use strict";(self.webpackChunklinux_tutorial=self.webpackChunklinux_tutorial||[]).push([["254"],{7318:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>s,metadata:()=>i,assets:()=>o,toc:()=>l,contentTitle:()=>c});var i=JSON.parse('{"id":"tls-key-management","title":"Managing public key infrastructure","description":"Generate keys","source":"@site/docs/tls-key-management.md","sourceDirName":".","slug":"/tls-key-management","permalink":"/linux/tls-key-management","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/linux/blob/main/docs/tls-key-management.md","tags":[],"version":"current","frontMatter":{"title":"Managing public key infrastructure","sidebar_label":"TLS Key management","keywords":["linux","openssl","tls"]},"sidebar":"docs","previous":{"title":"Network security","permalink":"/linux/network-security"},"next":{"title":"Storage Management","permalink":"/linux/storage-management"}}'),a=t("5893"),r=t("65");let s={title:"Managing public key infrastructure",sidebar_label:"TLS Key management",keywords:["linux","openssl","tls"]},c=void 0,o={},l=[{value:"Generate keys",id:"generate-keys",level:2},{value:"Certificate Signing Request",id:"certificate-signing-request",level:2},{value:"Self-sign certificates",id:"self-sign-certificates",level:2},{value:"Use CA to sign",id:"use-ca-to-sign",level:2},{value:"Setup root CA",id:"setup-root-ca",level:2},{value:"References",id:"references",level:2}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"generate-keys",children:"Generate keys"}),"\n",(0,a.jsx)(n.p,{children:"Generate 2048 bit RSA key using openssl:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl genrsa -out private.key 2048\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Key with higher bit size (say, RSA 4096 bit or even 8192 bit) are more secure\nbut it comes with additional computing overhead for encryption and decryption."})}),"\n",(0,a.jsx)(n.p,{children:"The key generated in the above command contains both private and the public\nkeys. Extract the public key:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl rsa -pubout -in private.key\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can encrypt the ",(0,a.jsx)(n.code,{children:"private.key"})," with a passphrase during creation instead of\nwriting in plaintext:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl genrsa -aes256 -out private.key 2048\n"})}),"\n",(0,a.jsx)(n.p,{children:"Convert an encrypted key file to a un-encrypted file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl rsa -in private.key -out unencrypted.key\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inspect various details in a private key:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl rsa -text -in private.key\nopenssl rsa -check -noout -in private.key\n"})}),"\n",(0,a.jsx)(n.h2,{id:"certificate-signing-request",children:"Certificate Signing Request"}),"\n",(0,a.jsx)(n.p,{children:"Create CSR (interactively, it will ask for various required and optional\nparameters):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -new -key private.key -out domain.example.com.csr\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create CSR non-interactively:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'openssl req -new -key private.key -noenc \\\n  -subj \'/CN=example.com/O=Example Inc./OU=Engineering/C=US/ST=California/L=San Francisco/emailAddress=email@example.com\' \\\n  -addext "keyUsage = digitalSignature,keyAgreement" \\\n  -addext "extendedKeyUsage = serverAuth, clientAuth" \\\n  -out example.com.csr\n'})}),"\n",(0,a.jsx)(n.p,{children:"Create private key and csr together:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -new -noenc \\\n  -subj '/CN=domain.example.com/O=Example Ltd/C=SG/L=Singapore' \\\n  -newkey rsa:2048 -keyout private2.key -out domain2.example.com.csr\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check CSR details:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -text -noout -verify -in mongo.csr.pem\n"})}),"\n",(0,a.jsx)(n.h2,{id:"self-sign-certificates",children:"Self-sign certificates"}),"\n",(0,a.jsx)(n.p,{children:"Self-signed certificates are intended for testing and development purposes only.\nGenerate a self-signed certificate for root of trust:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -x509 -days 365 -noenc \\\n  -subj '/CN=ROOT/O=ROOT/C=SG/L=Singapore' -key private.key -out ca.crt\n"})}),"\n",(0,a.jsx)(n.p,{children:"Use the self-signed root signing certificate to generate a signed certificate\nfrom the certificate request:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl x509 -req -in domain.example.com.csr -days 365 -CA ca.crt \\\n  -CAkey private.key -CAcreateserial -out domain.example.com.crt\n"})}),"\n",(0,a.jsx)(n.p,{children:"Do all the above in a single step:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -new -x509 -days 365 -noenc -newkey rsa:2048 -keyout private.key \\\n  -out public.crt -subj '/CN=domain.example.com/O=Example Ltd/C=SG/L=Singapore'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"use-ca-to-sign",children:"Use CA to sign"}),"\n",(0,a.jsx)(n.p,{children:"For production usage, we should be using a third-party CA authority. In case of\na own CA implementation, we could use a separate root or intermediatory CA key\nand certificate to sign. Better care should be taken when creating a root\ncertificate, e.g., a larger size key and encrypt the key file."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl genrsa -out ca.key -aes256 8192\n"})}),"\n",(0,a.jsx)(n.p,{children:"Generate CA public certificate:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -x509 -new -extensions v3_ca -key ca.key -days 365 -out ca.crt \\\n  -subj '/CN=ca.example.com/O=CA Inc./C=SG/L=Singapore'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Sign CSR:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl x509 -req -in domain.example.com.csr -CA ca.crt -CAkey ca.key \\\n  -days 365 -out domain.example.com.crt\n"})}),"\n",(0,a.jsx)(n.p,{children:"Check certificate details:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl x509 -text -noout -in domain.example.com.crt\n"})}),"\n",(0,a.jsx)(n.p,{children:"Verify:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl verify -CAfile ca.crt domain.example.com.crt\n"})}),"\n",(0,a.jsx)(n.h2,{id:"setup-root-ca",children:"Setup root CA"}),"\n",(0,a.jsx)(n.p,{children:"A root CA model can better protect the integrity of public key infrastructure.\nRoot CA is not usually used to sign server or client certificates, instead it is\nused to sign one or more intermediary certificates to grant them power to sign\nother certificates. In the event a CA Intermediary private key is compromised,\nthe CA Intermediary can be added to a certificate revocation list and all of the\ncertificates that are signed by the Intermediary are automatically invalidated."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a directory (it must be restricted location) to store all of the\nCA-related data:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir /root/ca && cd $_\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Create directories to contain CA certificates, CA database content,\nCertificate Revocation List, all newly issued certificates, and your private\nkeys:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir certs db crl newcerts private\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Protect your private keys to ensure that access to the directory where these\nare stored is limited to the root user:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"chmod 700 private\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsxs)(n.li,{children:["Create the files that will be used for your CA database. The ",(0,a.jsx)(n.code,{children:"index.txt"})," and\nserial files act as a kind of flat file database to keep track of signed\ncertificates."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"touch db/index.txt\nopenssl rand -hex 16  > db/serial\necho 1001 | tee  db/crlnumber\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"5",children:["\n",(0,a.jsxs)(n.li,{children:["Create config file (",(0,a.jsx)(n.code,{children:"/root/ca/ca-root.conf"}),"):"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'[default]\nname                    = root-ca\ndomain_suffix           = example.com\naia_url                 = http://$name.$domain_suffix/$name.crt\ncrl_url                 = http://$name.$domain_suffix/$name.crl\nocsp_url                = http://ocsp.$name.$domain_suffix:9080\ndefault_ca              = ca_default\nname_opt                = utf8,esc_ctrl,multiline,lname,align\n\n[ca_dn]\ncountryName             = "AU"\norganizationName        = "Example Org"\ncommonName              = "Root CA"\n\n[ca_default]\nhome                    = .\ndatabase                = $home/db/index.txt\nserial                  = $home/db/serial\ncrlnumber               = $home/db/crlnumber\ncertificate             = $home/$name.crt\nprivate_key             = $home/private/$name.key\nRANDFILE                = $home/private/random\nnew_certs_dir           = $home/certs\nunique_subject          = no\ncopy_extensions         = none\ndefault_days            = 3650\ndefault_crl_days        = 30\ndefault_md              = sha256\npolicy                  = policy_strict\n\n[policy_strict]\n# The root CA should only sign intermediary certificates that match.\n# See the POLICY FORMAT section of `man ca`.\ncountryName             = match\nstateOrProvinceName     = optional\norganizationName        = match\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[policy_loose]\n# Allow the intermediary CA to sign a more diverse range of certificates.\n# See the POLICY FORMAT section of the `ca` manual page.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[req]\n# Standard Req options\ndefault_bits            = 4096\nencrypt_key             = yes\ndefault_md              = sha256\nutf8                    = yes\nstring_mask             = utf8only\nprompt                  = no\ndistinguished_name      = ca_dn\nreq_extensions          = ca_ext\n\n[ca_ext]\n# Extensions for a the CA root (`man x509v3_config`).\nbasicConstraints        = critical,CA:true\nkeyUsage                = critical,keyCertSign,cRLSign\nsubjectKeyIdentifier    = hash\n\n[intermediary_ext]\n# Extensions for an intermediary CA.\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:0\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[server_ext]\n# Extensions for server certificates.\nbasicConstraints = CA:FALSE\nnsCertType = server\nnsComment = "OpenSSL Generated Server Certificate"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = critical, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\n\n[client_ext]\n# Extensions for client certificates.\nbasicConstraints = CA:FALSE\nnsCertType = client, email\nnsComment = "OpenSSL Generated Client Certificate"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth, emailProtection\n\n[crl_ext]\n# Extension for CRLs.\nauthorityKeyIdentifier=keyid:always\n\n[ocsp]\n# Extension for OCSP signing certificates.\nbasicConstraints = CA:FALSE\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, digitalSignature\nextendedKeyUsage = critical, OCSPSigning\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"6",children:["\n",(0,a.jsx)(n.li,{children:"Create and Verify the CA Root Key Pair. This is the most valuable key in the\nentire infrastructure, ensure that you use a lengthy and suitable passphrase to\nprotect it."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -new -config ca-root.conf -out root-ca.csr -keyout private/root-ca.key\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"7",children:["\n",(0,a.jsxs)(n.li,{children:["Create a self-signed certificate by using the CSR and the ",(0,a.jsx)(n.code,{children:"ca-root.conf"}),"\nfile. You will be prompted for your private key passphrase to continue."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl ca -selfsign -config ca-root.conf -in root-ca.csr -out root-ca.crt -extensions ca_ext\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can view the db/index.txt file to see the CA root certificate entry:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cat db/index.txt\n\nV   291026122304Z        8F75111A8E33B2D109A8BF079C67C83E  unknown /C=AU/O=Example Org/CN=Root CA\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The values that are displayed on each line within the database index include:"}),"\n",(0,a.jsx)(n.li,{children:"Status (V for valid, R for revoked, E for expired)."}),"\n",(0,a.jsx)(n.li,{children:"Expiry date in YYMMDDHHMMSSZ format."}),"\n",(0,a.jsx)(n.li,{children:"Revocation date or empty if not revoked (in this example output, the field is empty)."}),"\n",(0,a.jsx)(n.li,{children:"Hexadecimal serial number."}),"\n",(0,a.jsx)(n.li,{children:"File location or unknown, if not known."}),"\n",(0,a.jsx)(n.li,{children:"Distinguished name."}),"\n"]}),"\n",(0,a.jsxs)(n.ol,{start:"8",children:["\n",(0,a.jsx)(n.li,{children:"Next step is to create an intermediary CA that will be used to create all of\nyour server and client certificates. Create directory structure:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir /root/ca-intermediary\ncd /root/ca-intermediary/\nmkdir certs db crl newcerts private\nchmod 700 private\ntouch db/index.txt\nopenssl rand -hex 16  > db/serial\necho 1001 | tee  db/crlnumber\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"9",children:["\n",(0,a.jsxs)(n.li,{children:["Intermediary config (",(0,a.jsx)(n.code,{children:"intermediary.conf"}),"):"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'[default]\nname                    = sub-ca\n\ndomain_suffix           = example.com\naia_url                 = http://$name.$domain_suffix/$name.crt\ncrl_url                 = http://$name.$domain_suffix/$name.crl\nocsp_url                = http://ocsp.$name.$domain_suffix:9080\ndefault_ca              = ca_default\nname_opt                = utf8,esc_ctrl,multiline,lname,align\n\n[ca_dn]\ncountryName             = "AU"\norganizationName        = "Example Org"\ncommonName              = "Intermediary CA"\n\n[ca_default]\nhome                    = .\ndatabase                = $home/db/index.txt\nserial                  = $home/db/serial\ncrlnumber               = $home/db/crlnumber\ncertificate             = $home/$name.crt\nprivate_key             = $home/private/$name.key\nRANDFILE                = $home/private/random\nnew_certs_dir           = $home/certs\nunique_subject          = no\ncopy_extensions         = none\ndefault_days            = 3650\ndefault_crl_days        = 30\ndefault_md              = sha256\npolicy                  = policy_strict\n\n[policy_strict]\n# The root CA should only sign intermediary certificates that match.\n# See the POLICY FORMAT section of `man ca`.\ncountryName             = match\nstateOrProvinceName     = optional\norganizationName        = match\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[policy_loose]\n# Allow the intermediary CA to sign a more diverse range of certificates.\n# See the POLICY FORMAT section of the `ca` manual page.\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = optional\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[req]\n# Standard Req options\ndefault_bits            = 4096\nencrypt_key             = yes\ndefault_md              = sha256\nutf8                    = yes\nstring_mask             = utf8only\nprompt                  = no\ndistinguished_name      = ca_dn\nreq_extensions          = intermediary_ext\n\n[ca_ext]\n# Extensions for a the CA root (`man x509v3_config`).\nbasicConstraints        = critical,CA:true\nkeyUsage                = critical,keyCertSign,cRLSign\nsubjectKeyIdentifier    = hash\n\n[intermediary_ext]\n# Extensions for an intermediary CA.\nsubjectKeyIdentifier = hash\n# authorityKeyIdentifier = keyid:always,issuer\nbasicConstraints = critical, CA:true, pathlen:0\nkeyUsage = critical, digitalSignature, cRLSign, keyCertSign\n\n[server_ext]\n# Extensions for server certificates.\nbasicConstraints = CA:FALSE\nnsCertType = server\nnsComment = "OpenSSL Generated Server Certificate"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer:always\nkeyUsage = critical, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\n\n[client_ext]\n# Extensions for client certificates.\nbasicConstraints = CA:FALSE\nnsCertType = client, email\nnsComment = "OpenSSL Generated Client Certificate"\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth, emailProtection\n\n[crl_ext]\n# Extension for CRLs.\nauthorityKeyIdentifier=keyid:always\n\n[ocsp]\n# Extension for OCSP signing certificates.\nbasicConstraints = CA:FALSE\nsubjectKeyIdentifier = hash\nauthorityKeyIdentifier = keyid,issuer\nkeyUsage = critical, digitalSignature\nextendedKeyUsage = critical, OCSPSigning\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"10",children:["\n",(0,a.jsx)(n.li,{children:"Create a CSR for the intermediary certificate:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl req -new -config intermediary.conf -out sub-ca.csr -keyout private/sub-ca.key\n"})}),"\n",(0,a.jsx)(n.p,{children:"This certificate is also a signing certificate, so it is important to protect it\nwith a passphrase to help prevent its unauthorized use and maintain the security\nof your infrastructure. Enter the passphrase when prompted."}),"\n",(0,a.jsxs)(n.ol,{start:"11",children:["\n",(0,a.jsx)(n.li,{children:"Create a signed certificate for the intermediary CA. Copy the sub-ca.csr\nthat you generated in the previous step to the /root/ca directory on the system\nwhere your root CA is hosted."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl ca -config ca-root.conf -in sub-ca.csr -out newcerts/sub-ca.crt \\\n-extensions intermediary_ext\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"12",children:["\n",(0,a.jsx)(n.li,{children:"Create a certificate chain file. Because no systems are aware of the root CA\ncertificate, you should create a certificate chain that includes the public\ncertificate for the root CA with the newly created intermediary CA certificate.\nIn this way, hosts only need a copy of the chained certificate to validate any\ncertificates that are issued by the intermediary CA. To create the certificate\nchain, simply join the two public certificates by running the following command\non the root CA host:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cat root-ca.crt newcerts/sub-ca.crt > newcerts/chained-sub-ca.crt\nchmod 444 newcerts/chained-sub-ca.crt\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Copy the ",(0,a.jsx)(n.code,{children:"newcerts/sub-ca.crt"})," and ",(0,a.jsx)(n.code,{children:"newcerts/chained-sub-ca.crt"})," certificate\nback to the ",(0,a.jsx)(n.code,{children:"/root/ca-intermediary/"})," directory on the intermediary CA host. You\ncan now use this certificate to process server and client CSRs and to generate\nCRLs."]}),"\n",(0,a.jsxs)(n.p,{children:["When you return a signed certificate for any given CSR, include the\n",(0,a.jsx)(n.code,{children:"chained-sub-ca.crt"})," certificate so that it can be installed on the host where\nthe certificate will be used and distributed to any client that needs to\nvalidate the signed certificate."]}),"\n",(0,a.jsxs)(n.ol,{start:"13",children:["\n",(0,a.jsx)(n.li,{children:"Process CSRs and Sign Certificates"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"openssl ca -config intermediary.conf -extensions server_ext -days 375 \\\n-in www.example.com.csr -out newcerts/www.example.com.crt\n"})}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://pranabdas.github.io/drive/documents/linux-manuals/Oracle-linux--managing-TLS-certificates.pdf",children:"Oracle manual: Managing Certificates and Public Key Infrastructure"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://pranabdas.github.io/drive/documents/linux-manuals/red_hat_securing_networks.pdf",children:"RedHat manual: Securing networks"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://pranabdas.github.io/drive/documents/technical-articles/Securing-MongoDB-Cluster-with-TLS.pdf",children:"Securing MongoDB Cluster with TLS"})}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65:function(e,n,t){t.d(n,{Z:function(){return c},a:function(){return s}});var i=t(7294);let a={},r=i.createContext(a);function s(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);