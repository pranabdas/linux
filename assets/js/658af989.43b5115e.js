"use strict";(self.webpackChunklinux_tutorial=self.webpackChunklinux_tutorial||[]).push([["2817"],{1342:function(n,e,a){a.r(e),a.d(e,{frontMatter:()=>o,default:()=>j,toc:()=>l,metadata:()=>s,assets:()=>c,contentTitle:()=>i});var s=JSON.parse('{"id":"jq","title":"jq: CLI JSON processor","description":"Basic examples","source":"@site/docs/jq.md","sourceDirName":".","slug":"/jq","permalink":"/linux/jq","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/linux/blob/main/docs/jq.md","tags":[],"version":"current","frontMatter":{"title":"jq: CLI JSON processor","sidebar_label":"jq"},"sidebar":"docs","previous":{"title":"SELinux","permalink":"/linux/selinux"},"next":{"title":"PGP Encryption","permalink":"/linux/pgp"}}'),t=a(5893),r=a(65);let o={title:"jq: CLI JSON processor",sidebar_label:"jq"},i=void 0,c={},l=[{value:"Basic examples",id:"basic-examples",level:2},{value:"Convert jq array to bash list",id:"convert-jq-array-to-bash-list",level:2},{value:"Pretty print json",id:"pretty-print-json",level:2},{value:"Resources",id:"resources",level:2}];function d(n){let e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"basic-examples",children:"Basic examples"}),"\n",(0,t.jsx)(e.p,{children:"Parse object:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'json=\'{\n  "name": "Alice",\n  "age": 30,\n  "city": "New York"\n}\'\n\nname=$(echo "$json" | jq -r \'.name\')\nage=$(echo "$json" | jq -r \'.age\')\ncity=$(echo "$json" | jq -r \'.city\')\n\necho "$name is $age years old and lives in $city"\n# Alice is 30 years old and lives in New York\n'})}),"\n",(0,t.jsx)(e.p,{children:"jq can directly read from file:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n{\n  "name": "Alice",\n  "age": 30,\n  "city": "New York"\n}\nEOF\n\nname=$(jq \'.name\' data.json)\nage=$(jq \'.age\' data.json)\ncity=$(jq \'.city\' data.json)\n\necho "$name is $age years old and lives in $city"\nrm data.json\n'})}),"\n",(0,t.jsx)(e.p,{children:"Or read from API endpoint:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"name=$( curl -s https://api.github.com/users/pranabdas | jq -r '.name' )\nlocation=$( curl -s https://api.github.com/users/pranabdas | jq -r '.location' )\necho \"$name is from $location.\"\n# Pranab Das is from Singapore.\n"})}),"\n",(0,t.jsx)(e.p,{children:"Iterate over an array of items:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n[\n  {\n    "name": "Alice",\n    "age": 30\n  },\n  {\n    "name": "Bob",\n    "age": 35\n  }\n]\nEOF\n\njq -c \'.[]\' data.json | while read -r item; do\n  name=$(echo "$item" | jq -r \'.name\')\n  age=$(echo "$item" | jq -r \'.age\')\n  echo "Name: $name, Age: $age"\ndone\nrm data.json\n'})}),"\n",(0,t.jsx)(e.p,{children:"In case of arbitrary keys in an object:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'json=\'{\n  "name": "Alice",\n  "age": 30,\n  "city": "New York"\n}\'\n\necho "$json" | jq -r \'to_entries[] | "\\(.key)=\\(.value)"\' | while IFS=\'=\' read -r key value; do\n  echo "key: $key, value: $value"\ndone\n'})}),"\n",(0,t.jsx)(e.p,{children:"Update an json object:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n{\n  "name": "Alice",\n  "age": 30\n}\nEOF\n\njq \'.age = 32\' data.json > tmp.json\nmv tmp.json data.json\ncat data.json\nrm data.json\n'})}),"\n",(0,t.jsx)(e.p,{children:"Update an array of objects based key match:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n[\n  {\n    "name": "Alice",\n    "age": 30\n  },\n  {\n    "name": "Bob",\n    "age": 35\n  }\n]\nEOF\n\njq --arg name "Alice" --arg age 31 \'map(if .name == $name then .age = $age else . end)\' data.json > tmp.json\nmv tmp.json data.json\ncat data.json\nrm data.json\n'})}),"\n",(0,t.jsx)(e.p,{children:"Select item based on key:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n[\n  { "id": 1, "status": "pending" },\n  { "id": 2, "status": "pending" },\n  { "id": 3, "status": "pending" }\n]\nEOF\n\njq \'.[] | select(.id == 2) | .status = "completed"\' data.json\nrm data.json\n'})}),"\n",(0,t.jsx)(e.h2,{id:"convert-jq-array-to-bash-list",children:"Convert jq array to bash list"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n[\n  "one",\n  "two",\n  "three"\n]\nEOF\n\nlist=$( cat data.json | jq -r \'.[]\' )\n\nfor item in "${list[@]}"; do\n  echo $item\ndone\n\nrm data.json\n'})}),"\n",(0,t.jsx)(e.h2,{id:"pretty-print-json",children:"Pretty print json"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'cat > data.json << EOF\n[{\n    "name": "Alice", "age": 30\n  },\n  {\n     "name": "Bob",\n"age": 35}\n]\nEOF\n\ncat data.json | jq \'.\' > tmp.json\nmv tmp.json data.json\ncat data.json\nrm data.json\n'})}),"\n",(0,t.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://jqlang.org",children:"jqlang.org"})}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://github.com/mikefarah/yq/",children:"yq"})," (similar to jq, but works with both\nYAML and JSON)."]}),"\n"]})]})}function j(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},65:function(n,e,a){a.d(e,{Z:()=>i,a:()=>o});var s=a(7294);let t={},r=s.createContext(t);function o(n){let e=s.useContext(r);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);